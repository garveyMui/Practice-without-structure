#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
#define N 100

void BuildTree(int a[N],int n,int plc[N],int prc[N]);
int CmpTree(int root,int plc[N],int prc[N],int b,int flag1[N]);

int main(int argc, char *argv[])
{
    int n=1,l;
    int a[N],b[N];
    int i,j;
    int plc[N]={0},prc[N]={0};
    int nlc[N]={0},nrc[N]={0};
    int flag=1;
    int flag1[N]={0};
    scanf("%d",&n);
    while(n)
    {
        
        if(n==0)
        {
            break;
        }
        scanf("%d",&l);
        for(j=1;j<=n;j++)
        {
            plc[j]=0;
            prc[j]=0;
        }
        for(i=0;i<n;i++)
        {
            scanf("%d",&a[i]);
        }
        BuildTree(a,n,plc,prc);
 /*       for(j=0;j<n;j++)
        {
            printf("%d lc%d rc%d\t",a[j],plc[a[j]],prc[a[j]]);
            printf("\n");
        }*/
        for(i=0;i<l;i++)
        {
            for(j=1;j<=n;j++)
            {
                nlc[j]=0;
                nrc[j]=0;
                flag1[j]=0;
            }
            for(j=0;j<n;j++)
            {
                scanf("%d",&b[j]);
            }
            BuildTree(b,n,nlc,nrc);
            
            
            int cmp=1;
            flag1[a[0]]=1;
            if(a[0]==b[0])
            {
                for(j=1;j<n;j++)
                {
                    cmp*=CmpTree(a[0], plc, prc, b[j], flag1);
                }
            }
            else
            {
                cmp=0;
            }
            
            if(cmp==1)
            {
                if(flag==1)
                {
                    printf("Yes");
                    flag=2;
                }
                else
                {
                    printf("\nYes");
                }
                
                for(j=1;j<=n;j++)
                {
                    nlc[j]=0;
                    nrc[j]=0;
                    flag1[j]=0;
                }
            }
            else
            {
                if(flag==1)
                {
                    printf("No");
                    flag=2;
                }
                else
                {
                    printf("\nNo");
                }
                
            }
            
        }
        scanf("%d",&n);
        
    }
    return 0;
}
int CmpTree(int root,int plc[N],int prc[N],int b,int flag1[N])
{
    
    
        if(flag1[root]==1)
        {
            if(b<root)
            {
                return CmpTree(plc[root], plc, prc, b, flag1);
            }
            else if(b>root)
            {
                return CmpTree(prc[root], plc, prc, b, flag1);
            }
            else
            {
                return 0;
            }
        }
        else
        {
            if(b==root)
            {
                flag1[root]=1;
                return 1;
            }
            else
            {
                return 0;
            }
        }
    
}
void BuildTree(int a[N],int n,int plc[N],int prc[N])
{
    
    int i;
    int root=a[0];
    for(i=1;i<n;i++)
    {
        while(1)
        {
            if(a[i]<root)
            {
                if(plc[root]==0)
                {
                    plc[root]=a[i];
                    break;
                }
                else
                {
                    root=plc[root];
                }
            }
            else
            {
                if(prc[root]==0)
                {
                    prc[root]=a[i];
                    break;
                }
                else
                {
                    root=prc[root];
                }
            }
        }
        root=a[0];
 //       printf("%d lc%d rc%d\t",root,plc[root],prc[root]);
 //       printf("\n");
    }
    for(i=1;i<=n;i++)
    {
        if(plc[i]==0)
        {
            plc[i]=-1;
        }
    }
    for(i=1;i<=n;i++)
    {
        if(prc[i]==0)
        {
            prc[i]=-1;
        }
    }
}
