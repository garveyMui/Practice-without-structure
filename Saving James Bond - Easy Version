#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
#define N 2000
#define MaxVertexNum 300
#define Infinity 65535

typedef int Vertex;
typedef int WeightType;
typedef char DataType;
typedef struct ENode *PtrToENode;
struct ENode
{
    Vertex V1, V2;
    WeightType Weight;
};
typedef PtrToENode Edge;
typedef struct GNode *PtrToGNode;
struct GNode
{
    int Nv;
    int Ne;
    WeightType G[MaxVertexNum][MaxVertexNum];
    DataType Data[MaxVertexNum];
};
typedef PtrToGNode MGraph;
typedef struct Coordinate *coordinate;
struct Coordinate
{
    int i,j;
    int number;
};

MGraph CreateGraph(int VertexNum);
void InsertEdge(MGraph Graph, Edge E);
MGraph BuildGraph(void);
void Search(MGraph Graph,int crocodile,int d,coordinate *c,int n);
void DeepFirstSearch(Vertex V,MGraph Graph,coordinate *c,int d);
int flag=0;

int main(int argc, char *argv[])
{
    MGraph g;
    g=BuildGraph();
    
    
    return 0;
}
MGraph CreateGraph(int VertexNum)
{
    Vertex V, W;
    MGraph Graph;
    Graph = (MGraph)malloc(sizeof(struct GNode));
    Graph->Nv = VertexNum;
    Graph->Ne = 0;
    for(V=0;V<Graph->Nv;V++)
        for(W=0;W<Graph->Nv;W++)
            Graph->G[V][W]=Infinity;
    for(V=0;V<Graph->Nv;V++)
    {
        Graph->Data[V]='-';
    }
    return Graph;
}
void InsertEdge(MGraph Graph, Edge E)
{
    Graph->G[E->V1][E->V2] = E->Weight;
    Graph->G[E->V2][E->V1] = E->Weight;
}

MGraph BuildGraph(void)
{
    MGraph Graph;
    Edge E;
    int number=1;
    int n,d,crocodile;
    scanf("%d %d",&n,&d);
    int Nv, i, j;
    Nv=97+n;
    
    coordinate *c;
    c=malloc(N*sizeof(coordinate));
    Graph = CreateGraph(Nv);
    E=(Edge)malloc(sizeof(struct ENode));
    
    
    crocodile=number;
    int k,l;
    for(k=0;k<n;k++)
    {
        getchar();
        scanf("%d %d",&i,&j);
        c[number]=malloc(sizeof(struct Coordinate));
        c[number]->i=i;
        c[number]->j=j;
        c[number]->number=number;
        number++;
    }
    for(k=crocodile;k<number;k++)
    {
        for(l=k+1;l<number;l++)
        {
            if(sqrt(pow(c[k]->i-c[l]->i,2)+pow(c[k]->j-c[l]->j,2))<=d)
            {
                E->V1=c[k]->number;
                E->V2=c[l]->number;
                E->Weight=1;
            }
            InsertEdge(Graph,E);
        }
    }
    
    Search(Graph, crocodile, d, c,n);
    return Graph;
}
void DeepFirstSearch(Vertex V,MGraph Graph,coordinate *c,int d)
{
    int i;
    if(c[V]->i+d>=50||c[V]->i-d<=-50||c[V]->j+d>=50||c[V]->j-d<=-50)
    {
        printf("Yes");
        flag=1;
        Graph->Data[V]='2';
        return;
    }
    Graph->Data[V]='2';
    for(i=0;i<Graph->Nv&&flag==0;i++)
    {
        if(Graph->Data[i]!='2'&&Graph->G[V][i]==1)
        {
            DeepFirstSearch(i, Graph,c,d);
        }
    }
}
int FirstJump(int a[N],coordinate *c,int n,int d)
{
    int i,j=0;
    for(i=1;i<=n&&flag==0;i++)
    {
        if(sqrt(pow(c[i]->i,2)+pow(c[i]->j,2))<=15+d)
        {
            a[j]=i;
            j++;
        }
    }
    return j;
}
void Search(MGraph Graph,int crocodile,int d,coordinate *c,int n)
{
    int i,j;
    int a[N];
    j=FirstJump(a,c,n,d);
    for(i=0;i<j&&flag==0;i++)
    {
        if(Graph->Data[a[i]]=='-')
        {
            DeepFirstSearch(a[i], Graph,c,d);
        }
    }
    if(flag==0)
    {
        printf("No");
    }
}
