//
//  main.c
//  20200404
//
//  Created by 梅佳伟 on 2020/4/4.
//  Copyright © 2020 梅佳伟. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
#define N 10002
#define MaxVertexNum 200
#define Infinity 65535

typedef int Vertex;
typedef int WeightType;
struct ENode
{
    Vertex V1,V2;
    WeightType Weight;
};
typedef struct ENode *PtrToENode;
typedef PtrToENode Edge;
struct GNode
{
    int Nv;
    int Ne;
    WeightType G[MaxVertexNum][MaxVertexNum];
};
typedef struct GNode *PtrToGNode;
typedef PtrToGNode MGraph;
typedef enum {False=-1,True=1}Bool;
struct coordinate
{
    int i,j;
    int num;
};
struct MinDist
{
    int S;
    int Distance;
};
void SelectSort(struct MinDist dis[],int total);
int path[N];
struct coordinate c[N];
MGraph CreateGraph(int VertexNum)
{
    Vertex V,W;
    MGraph Graph;
    Graph=malloc(sizeof(struct GNode));
    Graph->Nv=VertexNum;
    Graph->Ne=0;
    for(V=1;V<=Graph->Nv;V++)
    {
        for(W=1;W<=Graph->Nv;W++)
        {
            Graph->G[V][W]=Infinity;
        }
    }
    return Graph;
}

void InsertEdge(MGraph Graph,Edge E)
{
    Graph->G[E->V1][E->V2]=E->Weight;
    Graph->G[E->V2][E->V1]=E->Weight;
    Graph->Ne++;
}

MGraph BuildGraph(struct coordinate c[N],int *d)
{
    MGraph Graph;
    Edge E;
    int Nv,i,j,crocodile;
    scanf("%d",&Nv);
    crocodile=Nv;
    Graph=CreateGraph(Nv);
    scanf("%d",d);
    E=malloc(sizeof(struct ENode));
    for(i=1;i<=crocodile;i++)
    {
        scanf("%d %d",&c[i].i,&c[i].j);
    }
    for(i=1;i<=crocodile;i++)
    {
        for(j=i;j<=crocodile;j++)
        {
            if(sqrt(pow(c[i].i-c[j].i,2)+pow(c[i].j-c[j].j,2))<=*d)
            {
                E->V1=i;
                E->V2=j;
                if(i!=j)
                E->Weight=1;
                else
                E->Weight=Infinity;
                InsertEdge(Graph, E);
            }
        }
    }
    return Graph;
}

void FirstStep(MGraph G,struct coordinate c[N],int a[N],int d)
{
    int i,j=1;
    c[0].num=0;
    for(i=1;i<=G->Nv;i++)
    {
        if(sqrt(pow(c[i].i,2)+pow(c[i].j,2))<=(7.5+d)
           &&sqrt(pow(c[i].i,2)+pow(c[i].j,2))>7.5)
        {
            a[j]=i;
           // printf("i%d,j%d\t",c[i].i,c[i].j);
            j++;
            c[0].num++;
        }
    }
}
Vertex FindMinDist(MGraph Graph,int dist[],int collected[])
{
    Vertex MinV,V;
    int MinDist=Infinity;
    for(V=1;V<=Graph->Nv;V++)
    {
        if(collected[V]==-1&&dist[V]<MinDist)
        {
            MinDist=dist[V];
            MinV=V;
        }
    }
    if(MinDist<Infinity)
    {
        return MinV;
    }
    else
        return -1;
}
void FirstMinimum(int V, int W)
{
    int i,pre1,pre2;
    i=V;pre1=V;
    while(path[path[i]]!=-1)
    {
        pre1=path[i];
        i=pre1;
    }
    
    i=W;pre2=W;
    while(path[path[i]]!=-1)
    {
        pre2=path[i];
        i=pre2;
    }
    if(pow(c[pre1].i,2)+pow(c[pre1].j,2)<pow(c[pre2].i,2)+pow(c[pre2].j,2))
    {
        path[W]=V;
    }
}

Vertex Dijkstra(MGraph Graph,int dist[],int path[],Vertex S,int maxPath[],struct coordinate c[N],int d)
{
    int collected[MaxVertexNum];
    Vertex V,W;
    for(V=1;V<=Graph->Nv;V++)
    {
        dist[V]=Graph->G[S][V];
        if(dist[V]<Infinity)
        {
            path[V]=S;
        }
        else
        {
            path[V]=-1;
        }
        collected[V]=-1;
    }
    dist[S]=0;
    collected[S]=True;
    V=S;
    while(1)
    {
       // printf("minDist%d ",V);
        if(c[V].i+d>=50||c[V].i-d<=-50||c[V].j+d>=50||c[V].j-d<=-50)
        {
            maxPath[S]=dist[V];
            maxPath[0]=S;
            break;
        }
        V=FindMinDist(Graph,dist,collected);
        if(V==-1)
        {
            maxPath[0]=0;
            break;
        }
        collected[V]=True;
        for(W=1;W<=Graph->Nv;W++)
        {
            if(collected[W]==-1&&Graph->G[V][W]<Infinity)
            {
                if(dist[V]+Graph->G[V][W]==dist[W])
                {
                    FirstMinimum(V,W);
                }
                if(dist[V]+Graph->G[V][W]<dist[W])
                {
                    dist[W]=dist[V]+Graph->G[V][W];
                    path[W]=V;
                }
            }
        }
    }
   // printf("\n");
    return V;
}

void SelectSort(struct MinDist dis[],int total)
{
    int i,j,mark;
    struct MinDist tmp;
    for(i=1;i<=total;i++)
    {
        mark=i;
        for(j=i+1;j<=total;j++)
        {
            if(dis[j].Distance<dis[mark].Distance)
            {
                mark=j;
            }
        }
        if(mark!=i)
        {
            tmp=dis[i];
            dis[i]=dis[mark];
            dis[mark]=tmp;
        }
    }
}
int FindMinimumFirst(struct MinDist dis[N],struct coordinate c[N])
{
    int i,mark=1;
    for(i=1;dis[i].Distance==dis[1].Distance;i++)
    {
        if(sqrt(pow(c[dis[i].S].i,2)+pow(c[dis[i].S].i,2))<
           sqrt(pow(c[dis[mark].S].i,2)+pow(c[dis[mark].S].i,2)))
        {
            mark=i;
        }
    }
    return mark;
}

int main (int argc, char *argv[])
{
    MGraph G;
    
    int i,dist[N],maxPath[N],a[N],d,j=1,k,x;
    struct MinDist dis[N];
    G=BuildGraph(c,&d);
    FirstStep(G, c,a,d);
    Vertex final[N];
    for(i=1;i<=c[0].num;i++)
    {
        for(x=1;x<=G->Nv;x++)
        {
            path[x]=-1;
            dist[x]=Infinity;
        }
        Dijkstra(G, dist, path, a[i], maxPath,c,d);
        if(maxPath[0]!=0)
        {
            dis[j].S=maxPath[0];
            dis[j].Distance=maxPath[maxPath[0]];
            j++;
           // printf("%d %d %d\n",dis[j-1].S,dis[j-1].Distance,j-1);
        }
    }
    int total=j-1;
    if(j!=1)
    {
        if(dis[1].Distance==0)
        {
            printf("1\n");
        }
        else
        {
            int mark;
            SelectSort(dis,total);
            mark=FindMinimumFirst(dis,c);
            printf("%d\n",dis[mark].Distance+2);
           // printf("%d\n",dis[1].Distance+2);
            final[1] = Dijkstra(G, dist, path, dis[mark].S, maxPath,c,d);
           // final[1] = Dijkstra(G, dist, path, dis[1].S, maxPath,c,d);
            for(k=2;k<=dist[final[1]]+1;k++)
            {
                final[k]=path[final[k-1]];
            }
            for(k--;k>=1;k--)
            {
                printf("%d %d\n",c[final[k]].i,c[final[k]].j);
            }
        }
        
    }
    else
    {
        printf("0");
    }
    
    return 0;
}
