//
//  main.c
//  20200404
//
//  Created by 梅佳伟 on 2020/4/4.
//  Copyright © 2020 梅佳伟. All rights reserved.
//
#include<stdio.h>
#include<stdlib.h>
#define MaxVerNum 200
#define N 1000
typedef int Vertex;
typedef int WeightType;
struct ENode
{
    Vertex V1,V2;
    WeightType Weight;
};
typedef struct ENode *PtrToENode;
typedef PtrToENode Edge;
typedef struct AdjacentVNode *PtrToAdjVNode;
struct AdjacentVNode
{
    Vertex V;
    WeightType Weight;
    PtrToAdjVNode Next;
};
typedef struct VNode
{
    PtrToAdjVNode FirstEdge;
}AdjList;
struct GNode
{
    int Nv,Ne;
    AdjList G[MaxVerNum];
};
typedef struct GNode *PtrToGNode;
typedef PtrToGNode LGraph;
LGraph CreateGraph(int VerNum)
{
    LGraph G;
    G=malloc(sizeof(struct GNode));
    G->Nv=VerNum;
    G->Ne=0;
    Vertex V;
    for(V=0;V<G->Nv;V++)
    {
        G->G[V].FirstEdge=NULL;
    }
    return G;
}
void InsertEdge(LGraph G,Edge E)
{
    PtrToAdjVNode NewNode;
    NewNode=(PtrToAdjVNode)malloc(sizeof(struct AdjacentVNode));
    NewNode->V=E->V2;
    NewNode->Weight=E->Weight;
    NewNode->Next=G->G[E->V1].FirstEdge;
    G->G[E->V1].FirstEdge=NewNode;
}
LGraph BuildGraph()
{
    LGraph G;
    Edge E;
    int Nv,Ne;
    scanf("%d %d",&Nv,&Ne);
    G=CreateGraph(Nv);
    G->Ne=Ne;
    E=malloc(sizeof(struct ENode));
    int i;
    for(i=0;i<G->Ne;i++)
    {
        scanf("%d %d %d",&E->V1,&E->V2,&E->Weight);
        InsertEdge(G,E);
    }
    return G;
}
typedef enum{False, True} Bool;
struct act
{
    Vertex Num;
    int Earliest;
};
typedef struct Node *PtrToNode;
struct Node
{
    struct act Data;
    PtrToNode Next;
};
typedef PtrToNode Position;
struct QNode
{
    Position Front,Rear;
    int MaxSize;
};
typedef struct QNode *Queue;
Bool IsEmpty(Queue Q)
{
    return(Q->Front==NULL);
}
struct act Dequeue(Queue Q)
{
    Position FrontCell;
    struct act FrontElem;
    FrontCell=Q->Front;
    if(Q->Front==Q->Rear)
        Q->Front=Q->Rear=NULL;
    else
        Q->Front=Q->Front->Next;
    FrontElem = FrontCell->Data;
    free(FrontCell);
    return FrontElem;
}
void Enqueue(Queue Q,struct act V)
{
    PtrToNode NewNode;
    NewNode=malloc(sizeof(struct Node));
    NewNode->Data=V;
    NewNode->Next=NULL;
    if(Q->Rear!=NULL)
    {
        Q->Rear->Next=NewNode;
        Q->Rear=NewNode;
    }
    else
    {
        Q->Rear=NewNode;
        Q->Front=Q->Rear;
    }
}
Queue CreateQueue(int MaxSize)
{
    Queue Q;
    Q=malloc(sizeof(struct QNode));
    Q->Front=Q->Rear=NULL;
    Q->MaxSize=MaxSize;
    return Q;
}
int FindMax(struct act V[],int cnt)
{
    int max=V[cnt-1].Earliest,i;
    for(i=0;i<cnt;i++)
    {
        if(V[i].Earliest>max)
        {
            max=V[i].Earliest;
        }
    }
    return max;
}
Bool TopSort(LGraph G, struct act TopOrder[])
{
    int Indegree[MaxVerNum],cnt,i;
    struct act V[N],V1;
    PtrToAdjVNode W;
    Queue Q = CreateQueue(G->Nv);
    for(i=0;i<G->Nv;i++)
    {
        V[i].Num=i;
        V[i].Earliest=0;
        Indegree[V[i].Num]=0;
    }
    for(i=0;i<G->Nv;i++)
    {
        for(W=G->G[V[i].Num].FirstEdge;W!=NULL;W=W->Next)
        {
            Indegree[W->V]++;
        }
    }
    for(i=0;i<G->Nv;i++)
    {
        if(Indegree[V[i].Num]==0)
        {
            Enqueue(Q,V[i]);
        }
    }
    cnt=0;
    while(!IsEmpty(Q))
    {
        V1=Dequeue(Q);
        TopOrder[cnt++]=V1;
        for(W=G->G[V1.Num].FirstEdge;W!=NULL;W=W->Next)
        {
            if(V1.Earliest+W->Weight>V[W->V].Earliest)
            {
                V[W->V].Earliest=V1.Earliest+W->Weight;
            }
            if(--Indegree[W->V]==0)
            {
                Enqueue(Q,V[W->V]);
            }
        }
    }
    if(cnt!=G->Nv)
    {
        printf("Impossible\n");
        return False;
    }
        
    else
    {
        printf("%d",FindMax(V,cnt));
        return True;
    }
}
int main(int argc,char *argv[])
{
    LGraph G;
    G=BuildGraph();
    struct act TopOrder[N];
    TopSort(G, TopOrder);
    return 0;
}
